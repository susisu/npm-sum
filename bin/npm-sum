#!/usr/bin/env node

"use strict";

// word-wrap settings
const WIDTH  = 80;
const INDENT = 2;

const self = require("../package.json");

const exec    = require("child_process").exec;

const indent  = require("indent-string");
const wrap    = require("word-wrap");
const longest = require("longest");
const pad     = require("pad-right");

process.title = "npm-sum";

const program = require("commander");
program.usage("[options] [<@scope>/]<name>[@<version>]");
program.version(self.version, "-v, --version");
program.parse(process.argv);

const pkg = program.args[0];
// show help and quit if package name is not specified
if (typeof pkg === "undefined") {
    program.help();
}

// fetch package information via npm
exec(`npm view --json --loglevel silent "${pkg}"`, { encoding: "utf8" }, (err, stdout) => {
    if (err) {
        process.stderr.write(`${err.toString().trim()}\nMaybe package was not found\n`);
        process.exit(1);
    }
    if (stdout.length === 0) {
        process.stderr.write("Error: No data\nMaybe specified version was not found\n");
        process.exit(1);
    }
    let data;
    try {
        data = JSON.parse(stdout);
    }
    catch (err) {
        process.stderr.write(`${err.toString().trim()}\nMaybe data is broken\n`);
        process.exit(1);
    }

    // use last one if data contains multiple versions
    if (Array.isArray(data)) {
        data = data[data.length - 1];
    }

    // create summary
    const items = [];
    // name
    if (data.name) {
        items.push({ label: "Name", field: data.name });
    }
    // version
    if (data.version) {
        if (data.time && data.time[data.version]) {
            const date = colorDate(new Date(data.time[data.version]).toLocaleString());
            items.push({ label: "Version", field: `${data.version} (${date})` });
        }
        else {
            items.push({ label: "Version", field: data.version });
        }
    }
    // homepage
    if (data.homepage) {
        items.push({ label: "Homepage", field: data.homepage });
    }
    // author
    if (data.author) {
        items.push({ label: "Author", field: data.author });
    }
    // license
    if (data.license) {
        items.push({ label: "License", field: data.license });
    }
    // description
    if (data.description) {
        items.push({ label: "Description", field: data.description });
    }
    // keywords
    if (data.keywords) {
        items.push({ label: "Keywords", field: data.keywords.join(", ") });
    }
    // tags
    if (data["dist-tags"]) {
        const tags = Object.keys(data["dist-tags"]).sort();
        const size = longest(tags).length;
        const list = tags.map(tag => {
            const version = data["dist-tags"][tag];
            if (data.time && data.time[version]) {
                const date = colorDate(new Date(data.time[version]).toLocaleString());
                return `${colorTag(pad(tag, size, " "))} : ${version} (${date})`;
            }
            else {
                return `${colorTag(pad(tag, size, " "))} : ${version}`;
            }
        });
        items.push({ label: "Tags", field: list.join("\n"), nowrap: true });
    }
    // binaries
    if (data.bin) {
        items.push({ label: "Binaries", field: Object.keys(data.bin).sort().join(", ") });
    }

    // output
    process.stdout.write(indent(createSummary(items), INDENT) + "\n");
});

function createSummary(items) {
    const labelSize = longest(items.map(item => item.label)).length;
    const fieldSize = WIDTH - (labelSize + " : ".length);
    const list = items.map(item => {
        const label = colorLabel(pad(item.label, labelSize, " "));
        if (item.field.length <= fieldSize && item.field.indexOf("\n") < 0) {
            const field = highlightLink(item.field);
            return `${label} : ${field}`;
        }
        else {
            const field = highlightLink(indent(
                item.nowrap
                    ? item.field
                    : wrap(item.field, { width: WIDTH - INDENT * 2, indent: "", trim: true }),
                INDENT
            ));
            return `${label} :\n${field}`;
        }
    });
    return list.join("\n");
}

function highlightLink(text) {
    // TODO: better regexp?
    // blue, underline
    return text.replace(/(https?\:\/\/[0-9A-Za-z\-_\.\/#&\?\=\+%]+)/g, "\u001b[4;34m$1\u001b[24;39m");
}

function colorLabel(label) {
    // bold
    return `\u001b[1m${label}\u001b[22m`;
}

function colorTag(tag) {
    // yellow, bold
    return `\u001b[1;33m${tag}\u001b[22;39m`;
}

function colorDate(date) {
    // green
    return `\u001b[32m${date}\u001b[39m`;
}
